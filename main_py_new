from data import get_mnist
import numpy as np
import matplotlib.pyplot as plt


"""
w = weights, b = bias, i = input, h = hidden, o = output, l = label
e.g. w_i_h = weights from input layer to hidden layer
"""

#let us import the dataset

#the dataset being used
images, labels = get_mnist()

#input to hidden layer neurons
w_i_h = np.random.uniform(-1, 1, (20, 784)) #hidden neurons, input neurons

#hidden to output layer neurons
w_h_o = np.random.uniform(-1, 1, (10, 20)) #output neurons, hidden neurons

#bias neuron is always 1

#bias weights input to hidden
b_i_h = np.zeros((20, 1)) #hidden neurons, bias neurons

#bias weights hidden to output
b_h_o = np.zeros((10, 1)) #output neurons, bias neurons

#the learning rate
learn_rate = 0.2


nr_correct = 0

#the number of epochs
epochs = 1000

#repeat until the epoch counter reaches the 'epoch' value
for epoch in range(epochs):
    #iterating through the records of the dataset
    for img, l in zip(images, labels):
        img.shape += (1,)
        l.shape += (1,)

        # Forward propagation input -> hidden
        h_pre = b_i_h + w_i_h @ img # multiply the weights with the input data, afterwards add the bias weights

        # calculate the values of the hidden neurons using the activation function
        h = 1 / (1 + np.exp(-h_pre))

        # Forward propagation hidden -> output
        o_pre = b_h_o + w_h_o @ h # multiply the weights with the hidden neurons, afterwards add the bias weights

        #calculate the values of the output neurons using the activation function
        o = 1 / (1 + np.exp(-o_pre))

        # Cost / Error calculation, calculating the error margin
        e = 1 / len(o) * np.sum((o - l) ** 2, axis=0)

        #check if it is a good fact or not
        nr_correct += int(np.argmax(o) == np.argmax(l))

        # Backpropagation output -> hidden (cost function derivative)

        #calculating the output delta
        delta_o = o - l

        #calculating the new hidden to output weights
        w_h_o += -learn_rate * delta_o @ np.transpose(h)

        #calculating the new bias to output weights
        b_h_o += -learn_rate * delta_o

        # Backpropagation hidden -> input (activation function derivative)
        delta_h = np.transpose(w_h_o) @ delta_o * (h * (1 - h))

        #calculating the new input to hidden weights
        w_i_h += -learn_rate * delta_h @ np.transpose(img)

        #calculating the new bias to hidden weights
        b_i_h += -learn_rate * delta_h

    # Show accuracy for this epoch
    print(f"Acc: {round((nr_correct / images.shape[0]) * 100, 2)}%")

    #reset the good facts counter
    nr_correct = 0

# Show results
while True:
    index = int(input("Enter a number (0 - 59999): "))
    img = images[index]
    plt.imshow(img.reshape(28, 28), cmap="Greys")

    img.shape += (1,)
    # Forward propagation input -> hidden
    h_pre = b_i_h + w_i_h @ img.reshape(784, 1)
    h = 1 / (1 + np.exp(-h_pre))
    # Forward propagation hidden -> output
    o_pre = b_h_o + w_h_o @ h
    o = 1 / (1 + np.exp(-o_pre))

    plt.title(f"Subscribe if its a {o.argmax()} :)")
    plt.show()